/*
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 50729
 Source Host           : localhost:3306
 Source Schema         : whalex-config

 Target Server Type    : MySQL
 Target Server Version : 50729
 File Encoding         : 65001

 Date: 09/08/2020 22:46:24
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `c_use` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `effect` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `c_schema` text CHARACTER SET utf8 COLLATE utf8_bin NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfo_datagrouptenant`(`data_id`, `group_id`, `tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 59 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of config_info
-- ----------------------------
INSERT INTO `config_info` VALUES (1, 'application-dev.yml', 'DEFAULT_GROUP', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    tables:\r\n      - sys_role_menu\r\n      - sys_customer_role', '9ae55a7cdc504bf45a1a59da5252d18c', '2020-07-05 13:36:42', '2020-07-23 22:25:37', NULL, '0:0:0:0:0:0:0:1', '', '', 'null', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` VALUES (2, 'whale-auth-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /druid/**\r\n        - /actuator/**\r\n        - /v2/api-docs\r\n# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n      stat-view-servlet:\r\n        enabled: true\r\n        url-pattern: /druid/*\r\n        #login-username: admin\r\n        #login-password: admin\r\n      filter:\r\n        stat:\r\n          enabled: true\r\n          log-slow-sql: true\r\n          slow-sql-millis: 10000\r\n          merge-sql: false\r\n        wall:\r\n          config:\r\n            multi-statement-allow: true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n\r\n# Logger Config\r\nlogging:\r\n  level:\r\n    com.whalex.usercentre.mapper: debug', '6830c462a30696ad0587fdd89433e4eb', '2020-07-05 14:02:57', '2020-07-12 10:57:55', NULL, '127.0.0.1', '', '', 'null', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` VALUES (4, 'whale-user-centre-dev.yml', 'DEFAULT_GROUP', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /druid/**\r\n        - /actuator/**\r\n        - /v2/api-docs\r\n# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n      stat-view-servlet:\r\n        enabled: true\r\n        url-pattern: /druid/*\r\n        #login-username: admin\r\n        #login-password: admin\r\n      filter:\r\n        stat:\r\n          enabled: true\r\n          log-slow-sql: true\r\n          slow-sql-millis: 1\r\n          merge-sql: false\r\n        wall:\r\n          config:\r\n            multi-statement-allow: true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n\r\n# Logger Config\r\nlogging:\r\n  level:\r\n    com.whalex.usercentre.mapper: debug\r\n  ', 'ec77352f4e206bc08d46a6221e0cf6ab', '2020-07-05 14:18:58', '2020-07-23 22:30:00', NULL, '0:0:0:0:0:0:0:1', '', '', 'null', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` VALUES (15, 'whale-system-centre-dev.yml', 'DEFAULT_GROUP', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-sys}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/', '8173deb795c8222e47c8c246e7452842', '2020-07-07 21:00:46', '2020-07-07 21:01:40', NULL, '0:0:0:0:0:0:0:1', '', '', 'null', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` VALUES (16, 'whale-pay-order-dev.yml', 'DEFAULT_GROUP', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/', 'e3825f2b55910692dbf8fde9d1fbefca', '2020-07-29 21:47:21', '2020-07-29 21:47:55', NULL, '0:0:0:0:0:0:0:1', '', '', 'null', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` VALUES (18, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel        \r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #将消费者与binder绑定并划分组 设置dlq\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          pay_input_dlq_channel:\r\n           #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: manual\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: manual\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10\r\n              #DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: DLX\r\n              #设置死信队列名称\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'b763237f1b1841d241a794ec3f358293', '2020-08-05 20:12:06', '2020-08-09 22:38:07', NULL, '0:0:0:0:0:0:0:1', '', '', 'null', 'null', 'null', 'yaml', 'null');

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime(0) NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfoaggr_datagrouptenantdatum`(`data_id`, `group_id`, `tenant_id`, `datum_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '增加租户字段' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfobeta_datagrouptenant`(`data_id`, `group_id`, `tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info_beta' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfotag_datagrouptenanttag`(`data_id`, `group_id`, `tenant_id`, `tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info_tag' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation`  (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`) USING BTREE,
  UNIQUE INDEX `uk_configtagrelation_configidtag`(`id`, `tag_name`, `tag_type`) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_tag_relation' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '配额，0表示使用默认值',
  `usage` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '使用量',
  `max_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '最大变更历史数量',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_group_id`(`group_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '集群、各Group容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info`  (
  `id` bigint(64) UNSIGNED NOT NULL,
  `nid` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL,
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `op_type` char(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`nid`) USING BTREE,
  INDEX `idx_gmt_create`(`gmt_create`) USING BTREE,
  INDEX `idx_gmt_modified`(`gmt_modified`) USING BTREE,
  INDEX `idx_did`(`data_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 82 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '多租户改造' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
INSERT INTO `his_config_info` VALUES (1, 19, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\n', '1b9e2ca5050f252a56c8ff820a61f087', '2020-07-12 00:21:58', '2020-07-12 00:21:59', NULL, '127.0.0.1', 'U', '');
INSERT INTO `his_config_info` VALUES (7, 20, 'application-whale-auth-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/', '00406a5bac65685015b6c87b00201d11', '2020-07-12 10:04:16', '2020-07-12 10:04:17', NULL, '127.0.0.1', 'D', '');
INSERT INTO `his_config_info` VALUES (11, 21, 'whale-auth.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/', '00406a5bac65685015b6c87b00201d11', '2020-07-12 10:04:20', '2020-07-12 10:04:20', NULL, '127.0.0.1', 'D', '');
INSERT INTO `his_config_info` VALUES (4, 22, 'whale-user-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/', '00406a5bac65685015b6c87b00201d11', '2020-07-12 10:05:04', '2020-07-12 10:05:05', NULL, '127.0.0.1', 'U', '');
INSERT INTO `his_config_info` VALUES (4, 23, 'whale-user-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n      stat-view-servlet:\r\n        enabled: true\r\n        url-pattern: /druid/*\r\n        #login-username: admin\r\n        #login-password: admin\r\n      filter:\r\n        stat:\r\n          enabled: true\r\n          log-slow-sql: true\r\n          slow-sql-millis: 10000\r\n          merge-sql: false\r\n        wall:\r\n          config:\r\n            multi-statement-allow: true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/', '157f6a7bbd7c57ab54794f21db1b38a1', '2020-07-12 10:08:47', '2020-07-12 10:08:48', NULL, '127.0.0.1', 'U', '');
INSERT INTO `his_config_info` VALUES (4, 24, 'whale-user-centre-dev.yml', 'DEFAULT_GROUP', '', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /druid/**\r\n        - /actuator/**\r\n        - /v2/api-docs\r\n# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n      stat-view-servlet:\r\n        enabled: true\r\n        url-pattern: /druid/*\r\n        #login-username: admin\r\n        #login-password: admin\r\n      filter:\r\n        stat:\r\n          enabled: true\r\n          log-slow-sql: true\r\n          slow-sql-millis: 10000\r\n          merge-sql: false\r\n        wall:\r\n          config:\r\n            multi-statement-allow: true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/', '72120d166fa612c3335f51df5bb59656', '2020-07-12 10:11:44', '2020-07-12 10:11:45', NULL, '127.0.0.1', 'U', '');
INSERT INTO `his_config_info` VALUES (2, 25, 'whale-auth-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n    ', 'a9ecb96ea94233ecbbc8a309409f63c4', '2020-07-12 10:57:55', '2020-07-12 10:57:55', NULL, '127.0.0.1', 'U', '');
INSERT INTO `his_config_info` VALUES (4, 26, 'whale-user-centre-dev.yml', 'DEFAULT_GROUP', '', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /druid/**\r\n        - /actuator/**\r\n        - /v2/api-docs\r\n# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n      stat-view-servlet:\r\n        enabled: true\r\n        url-pattern: /druid/*\r\n        #login-username: admin\r\n        #login-password: admin\r\n      filter:\r\n        stat:\r\n          enabled: true\r\n          log-slow-sql: true\r\n          slow-sql-millis: 10000\r\n          merge-sql: false\r\n        wall:\r\n          config:\r\n            multi-statement-allow: true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n\r\n# Logger Config\r\nlogging:\r\n  level:\r\n    com.whalex.usercentre.mapper: debug', '6830c462a30696ad0587fdd89433e4eb', '2020-07-12 13:32:03', '2020-07-12 13:32:03', NULL, '127.0.0.1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 27, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler', 'cf0e21a390c2226ed1eaa26cfdb14cf8', '2020-07-22 21:53:49', '2020-07-22 21:53:49', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 28, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    - sys_customer', '42f70ed04ba589d34e641f90d1414a5a', '2020-07-22 21:54:09', '2020-07-22 21:54:09', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 29, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    - sys_customer', '42f70ed04ba589d34e641f90d1414a5a', '2020-07-22 21:55:09', '2020-07-22 21:55:09', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 30, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    tables:\r\n      - sys_customer', '3998541a8c9cc27bce10c3f983b15d0f', '2020-07-23 21:35:57', '2020-07-23 21:35:57', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 31, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\n# whalex:\r\n#   tenant:\r\n#     tables:\r\n#       - sys_customer', 'cc315aee1c3fe10159429460297463d5', '2020-07-23 21:38:41', '2020-07-23 21:38:41', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 32, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    tables:\r\n      - sys_role_menu', '75e1865e4c9a1e84789c4282fe9e0f3b', '2020-07-23 22:14:39', '2020-07-23 22:14:39', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 33, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    tables:\r\n      - sys_role_menu\r\n      - sys_customer_role', '9ae55a7cdc504bf45a1a59da5252d18c', '2020-07-23 22:21:08', '2020-07-23 22:21:09', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 34, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    tables:\r\n      - sys_role_menu\r\n      # - sys_customer_role', '7bd730320904aaab0c5517184d620486', '2020-07-23 22:23:05', '2020-07-23 22:23:05', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 35, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    tables:\r\n      - sys_role_menu\r\n      - sys_customer_role', '9ae55a7cdc504bf45a1a59da5252d18c', '2020-07-23 22:25:22', '2020-07-23 22:25:22', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (1, 36, 'application-dev.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  redis:\r\n    host: whalex-redis\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n  cloud:\r\n    sentinel:\r\n      eager: true\r\n      filter:\r\n        url-patterns: /** \r\n      transport:\r\n        dashboard: whalex-sentinel:5020\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\'\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n\r\nfeign:\r\n  sentinel:\r\n    enabled: true\r\n  okhttp:\r\n    enabled: true\r\n  httpclient:\r\n    enabled: false\r\n  client:\r\n    config:\r\n      default:\r\n        connectTimeout: 10000\r\n        readTimeout: 10000\r\n  compression:\r\n    request:\r\n      enabled: true\r\n    response:\r\n      enabled: true\r\nmybatis-plus:\r\n  tenant-enable: ture\r\n  mapper-locations: classpath:/mapper/*Mapper.xml\r\n  global-config:\r\n    banner: false\r\n    db-config:\r\n      id-type: auto\r\n      field-strategy: NOT_EMPTY\r\n#  type-handlers-package:  com.pig4cloud.pigx.common.data.handler\r\nwhalex:\r\n  tenant:\r\n    tables:\r\n      - sys_role_menu\r\n      # - sys_customer_role', '7bd730320904aaab0c5517184d620486', '2020-07-23 22:25:37', '2020-07-23 22:25:37', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (4, 37, 'whale-user-centre-dev.yml', 'DEFAULT_GROUP', '', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /druid/**\r\n        - /actuator/**\r\n        - /v2/api-docs\r\n# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n      stat-view-servlet:\r\n        enabled: true\r\n        url-pattern: /druid/*\r\n        #login-username: admin\r\n        #login-password: admin\r\n      filter:\r\n        stat:\r\n          enabled: true\r\n          log-slow-sql: true\r\n          slow-sql-millis: 1\r\n          merge-sql: false\r\n        wall:\r\n          config:\r\n            multi-statement-allow: true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n\r\n# Logger Config\r\nlogging:\r\n  level:\r\n    com.whalex.usercentre.mapper: debug', '66a885c102f21e909f7bb27a4bca01b2', '2020-07-23 22:29:47', '2020-07-23 22:29:47', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (4, 38, 'whale-user-centre-dev.yml', 'DEFAULT_GROUP', '', 'security:\r\n  oauth2:\r\n    client:\r\n      ignore-urls:\r\n        - /druid/**\r\n        - /actuator/**\r\n        - /v2/api-docs\r\n# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-customer}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n      stat-view-servlet:\r\n        enabled: true\r\n        url-pattern: /druid/*\r\n        #login-username: admin\r\n        #login-password: admin\r\n      filter:\r\n        stat:\r\n          enabled: true\r\n          log-slow-sql: true\r\n          slow-sql-millis: 1\r\n          merge-sql: false\r\n        wall:\r\n          config:\r\n            multi-statement-allow: true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n\r\n# Logger Config\r\nlogging:\r\n  level:\r\n    com.whalex.usercentre.mapper: debug\r\n    1', 'dcf5952cd58de10adeb77417c2f57acb', '2020-07-23 22:30:00', '2020-07-23 22:30:00', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (0, 39, 'whale-pay-order-dev.yml', 'DEFAULT_GROUP', '', '1', 'c4ca4238a0b923820dcc509a6f75849b', '2020-07-29 21:47:20', '2020-07-29 21:47:21', NULL, '0:0:0:0:0:0:0:1', 'I', '');
INSERT INTO `his_config_info` VALUES (16, 40, 'whale-pay-order-dev.yml', 'DEFAULT_GROUP', '', '1', 'c4ca4238a0b923820dcc509a6f75849b', '2020-07-29 21:47:55', '2020-07-29 21:47:55', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (0, 41, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '1', 'c4ca4238a0b923820dcc509a6f75849b', '2020-08-05 20:12:05', '2020-08-05 20:12:06', NULL, '0:0:0:0:0:0:0:1', 'I', '');
INSERT INTO `his_config_info` VALUES (18, 42, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '1', 'c4ca4238a0b923820dcc509a6f75849b', '2020-08-05 20:12:30', '2020-08-05 20:12:30', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 43, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/', 'e3825f2b55910692dbf8fde9d1fbefca', '2020-08-07 21:37:28', '2020-08-07 21:37:28', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 44, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\nspring:\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '36dc68224a3f6b8fb6e90085d6c5a4d2', '2020-08-07 21:41:39', '2020-08-07 21:41:40', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 45, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '95d81dde53844421175d7f1ce05ab3ff', '2020-08-09 15:44:58', '2020-08-09 15:44:57', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 46, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '43bafbe1dcdaec510d3f05cff9640cfa', '2020-08-09 16:09:21', '2020-08-09 16:09:21', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 47, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #  #将消费者与binder绑定并划分组\r\n        # pay_input_dlq_channel:\r\n        #   destination: pay_channel\r\n        #   #对应queue 为了与kafaka兼容\r\n        #   group: pay-queue.dlq\r\n        #   binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'b1147e2e6c2421cbf04382dec60a04e7', '2020-08-09 16:16:42', '2020-08-09 16:16:43', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 48, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        # pay_input_dlq_channel:\r\n        #   destination: pay_channel\r\n        #   #对应queue 为了与kafaka兼容\r\n        #   group: pay-queue.dlq\r\n        #   binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'e19841c26a09bfb9b56eadbf5929be12', '2020-08-09 16:23:26', '2020-08-09 16:23:27', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 49, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '43bafbe1dcdaec510d3f05cff9640cfa', '2020-08-09 16:33:21', '2020-08-09 16:33:21', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 50, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 10000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '32652427ec862efc78dbd0448a14435c', '2020-08-09 16:41:40', '2020-08-09 16:41:40', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 51, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 10000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '7c151971e37f392498b83a1ec4d482a0', '2020-08-09 16:50:05', '2020-08-09 16:50:05', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 52, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'b61069ad995eb13cda83c1ddbb907422', '2020-08-09 16:51:36', '2020-08-09 16:51:36', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 53, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'f81075a42a0d2a9696f280261d25803a', '2020-08-09 17:29:45', '2020-08-09 17:29:46', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 54, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'a3826bc85a19e1a003d96fca67b7b87f', '2020-08-09 17:34:12', '2020-08-09 17:34:13', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 55, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'f81075a42a0d2a9696f280261d25803a', '2020-08-09 17:51:18', '2020-08-09 17:51:19', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 56, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_channel:\r\n          # destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay_channel.pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'b5d9342701270bc43e38aede13b595bf', '2020-08-09 17:51:30', '2020-08-09 17:51:31', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 57, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          # destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay_channel.pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'de4dec7ab9a5eaf7a6d1db8fbb955348', '2020-08-09 17:59:14', '2020-08-09 17:59:15', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 58, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '43df3b0389e4921ea1f85eca1d1b98ba', '2020-08-09 18:04:48', '2020-08-09 18:04:49', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 59, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              #autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '00906086e9a4e271a51c07f1160ede5c', '2020-08-09 18:07:48', '2020-08-09 18:07:48', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 60, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              #autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'c4ca4932617b4eddc5403b53f8085e50', '2020-08-09 18:09:30', '2020-08-09 18:09:31', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 61, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              #autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              declareDlx: true\r\n              dlqDeadLetterExchange: pay_dlq_channel\r\n              dlqDeadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              dlqDeadLetterRoutingKey: #\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'fce1dc00bb559f9dc3a7a1af0f4e3130', '2020-08-09 18:11:06', '2020-08-09 18:11:06', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 62, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              declareDlx: true\r\n              dlqDeadLetterExchange: pay_dlq_channel\r\n              dlqDeadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              dlqDeadLetterRoutingKey: #\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'f3ff8e488152ef07727e3bc4866b3f45', '2020-08-09 18:17:10', '2020-08-09 18:17:11', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 63, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '6b3af935d56ac86b81b0a513ab212221', '2020-08-09 18:19:52', '2020-08-09 18:19:53', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 64, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              deadLetterExchange: pay_dlq_channel\r\n              dlqDeadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '3f9df492de34b7d9b75602b50b291686', '2020-08-09 18:20:45', '2020-08-09 18:20:46', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 65, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: pay_dlq_channel\r\n              dlqDeadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '7c01e8e21a31767a6990171c83daa041', '2020-08-09 18:23:47', '2020-08-09 18:23:48', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 66, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: pay_dlq_channel\r\n              dlqDeadLetterQueueName: pay_channel.pay_dlq_channel.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '9451c3c32d0bb1c2123440f2f2ff4f85', '2020-08-09 18:26:42', '2020-08-09 18:26:43', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 67, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: pay_dlq_channel\r\n              dlqDeadLetterQueueName: pay_channel.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '5705c65acf65a1c01e6cc43c098e97fd', '2020-08-09 18:35:26', '2020-08-09 18:35:26', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 68, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: pay_dlq_channel\r\n              dlqDeadLetterQueueName: pay_channel.pay-queue1111111.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '45d8a3e88c02071dd2069f5f86b56fce', '2020-08-09 18:39:11', '2020-08-09 18:39:12', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 69, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: pay_channel.pay-queue1111111.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'e57f4f3fe79550cc1e4c399adab34e4b', '2020-08-09 18:40:52', '2020-08-09 18:40:52', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 70, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: pay_dlq_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: pay_dlq_channel.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '05d0b7ee504c108d1a14b7e2354fd8a5', '2020-08-09 18:43:42', '2020-08-09 18:43:42', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 71, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: pay_dlq_channel\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '4c44e052123f3f3e5badd3ffbe607750', '2020-08-09 18:45:05', '2020-08-09 18:45:06', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 72, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n         #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: DLX\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '2407c904e254978c2ab8b9ddba26f131', '2020-08-09 20:45:22', '2020-08-09 20:45:22', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 73, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #  #将消费者与binder绑定并划分组\r\n        # pay_input_dlq_channel:\r\n        #   destination: DLX\r\n        #   #对应queue 为了与kafaka兼容\r\n        #   group: pay-queue.dlq\r\n        #   binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              # deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              # deadLetterExchange: DLX\r\n              # deadLetterQueueName: DLX.pay-queue.dlq\r\n              # declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '7c5a6b80f4758f11601c0d624d369e9b', '2020-08-09 20:50:27', '2020-08-09 20:50:27', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 74, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #  #将消费者与binder绑定并划分组\r\n        # pay_input_dlq_channel:\r\n        #   destination: DLX\r\n        #   #对应queue 为了与kafaka兼容\r\n        #   group: pay-queue.dlq\r\n        #   binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              # DLQ相关\r\n              # autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              # deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              # deadLetterExchange: DLX\r\n              # deadLetterQueueName: DLX.pay-queue.dlq\r\n              # declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'a7947a90d1802ef510ea95b4b6cf7f02', '2020-08-09 20:52:10', '2020-08-09 20:52:11', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 75, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #  #将消费者与binder绑定并划分组\r\n        # pay_input_dlq_channel:\r\n        #   destination: DLX\r\n        #   #对应queue 为了与kafaka兼容\r\n        #   group: pay-queue.dlq\r\n        #   binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              # ttl: 10000\r\n              # DLQ相关\r\n              # autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              # deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              # deadLetterExchange: DLX\r\n              # deadLetterQueueName: DLX.pay-queue.dlq\r\n              # declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'a35bf1204e840088dff08b4d1f40fb30', '2020-08-09 20:57:17', '2020-08-09 20:57:18', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 76, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #  #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10000\r\n              #DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: DLX\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'ead55f67e79f16434f168728a355dc78', '2020-08-09 20:59:09', '2020-08-09 20:59:09', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 77, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #  #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              #DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: DLX\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '7b0010a1f0ace9fab9cfa389a723b697', '2020-08-09 22:11:27', '2020-08-09 22:11:27', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 78, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n          #需要设置不如ddl不生效\r\n          producer:\r\n            requiredGroups: pay-queue\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              #DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: DLX\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '864553a5e7b302cfc69a821912ce0181', '2020-08-09 22:12:02', '2020-08-09 22:12:02', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 79, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel        \r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 1000\r\n              #DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: DLX\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '3bd34ef8993d9224188f1846be7a4b9f', '2020-08-09 22:16:37', '2020-08-09 22:16:38', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 80, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel        \r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #将消费者与binder绑定并划分组\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: MANUAL\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10\r\n              #DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: DLX\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', '4067833f8d3b44d59cfc71fbdb6ba738', '2020-08-09 22:27:43', '2020-08-09 22:27:43', NULL, '0:0:0:0:0:0:0:1', 'U', '');
INSERT INTO `his_config_info` VALUES (18, 81, 'whale-message-centre-dev.yml', 'DEFAULT_GROUP', '', '# 数据源\r\nspring:\r\n  datasource:\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      driver-class-name: com.mysql.cj.jdbc.Driver\r\n      username: ${MYSQL_USER:root}\r\n      password: ${MYSQL_PWD:123456789}\r\n      url: jdbc:mysql://${MYSQL_HOST:whalex-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:whalex-pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\r\n  freemarker:\r\n    allow-request-override: false\r\n    allow-session-override: false\r\n    cache: true\r\n    charset: UTF-8\r\n    check-template-location: true\r\n    content-type: text/html\r\n    enabled: true\r\n    expose-request-attributes: false\r\n    expose-session-attributes: false\r\n    expose-spring-macro-helpers: true\r\n    prefer-file-system-access: true\r\n    suffix: .ftl\r\n    template-loader-path: classpath:/templates/\r\n  cloud:\r\n    stream:\r\n      #绑定交换机名称与代码定义的通道名称相同\r\n      #外部消息传递系统和应用程序之间的桥梁，提供消息的“生产者”和“消费者”（由目标绑定器创建）\r\n      bindings:\r\n        #pay_output_channel 与binder对应\r\n        pay_output_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel        \r\n        #将消费者与binder绑定并划分组\r\n        pay_input_channel:\r\n          destination: pay_channel\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue\r\n          binder: pay_channel\r\n        #将消费者与binder绑定并划分组 设置dlq\r\n        pay_input_dlq_channel:\r\n          destination: DLX\r\n          #对应queue 为了与kafaka兼容\r\n          group: pay-queue.dlq\r\n          binder: pay_channel  \r\n      rabbit:\r\n        bindings:\r\n          pay_input_dlq_channel:\r\n           #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: manual\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n          #定义消费者配置\r\n          pay_input_channel:\r\n            #一次消费多少条消息\r\n            consumer:\r\n              concurrency: 1\r\n              #重新排队 当发送失败是否\r\n              requeue-rejected: false\r\n              #签收模式 手工签收\r\n              acknowledge-mode: manual\r\n              #连接恢复尝试之间的时间间隔（以毫秒为单位）。\r\n              recovery-interval: 3000\r\n              #是否持久化\r\n              durable-subscription: true\r\n              #最大消费者数量\r\n              max-concurrency: 5\r\n              #设置超时时间\r\n              ttl: 10\r\n              #DLQ相关\r\n              autoBindDlq: true # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。\r\n              deadLetterRoutingKey: #\r\n              #定义对应的死信交换机\r\n              deadLetterExchange: DLX\r\n              deadLetterQueueName: DLX.pay-queue.dlq\r\n              declareDlx: true\r\n      #Destination Binders：目标绑定器，目标指的是 kafka 还是 RabbitMQ，\r\n      #绑定器就是封装了目标中间件的包。如果操作的是 kafka 就使用 kafka binder ，\r\n      #如果操作的是 RabbitMQ 就使用 rabbitmq binder。\r\n      binders:\r\n        pay_channel:\r\n          #绑定消息中间件类型\r\n          type: rabbit\r\n          #链接配置\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                addresses: rabbitmq-path\r\n                username: guest\r\n                password: guest\r\n                virtual-host: /', 'b4007c1284d8b7eff6fca3b39671c834', '2020-08-09 22:38:07', '2020-08-09 22:38:07', NULL, '0:0:0:0:0:0:0:1', 'U', '');

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions`  (
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `resource` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `action` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  UNIQUE INDEX `uk_role_permission`(`role`, `resource`, `action`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles`  (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  UNIQUE INDEX `idx_user_role`(`username`, `role`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of roles
-- ----------------------------
INSERT INTO `roles` VALUES ('nacos', 'ROLE_ADMIN');

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '配额，0表示使用默认值',
  `usage` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '使用量',
  `max_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '聚合子配置最大个数',
  `max_aggr_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '最大变更历史数量',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '租户容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_info_kptenantid`(`kp`, `tenant_id`) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'tenant_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `password` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', 1);

SET FOREIGN_KEY_CHECKS = 1;
